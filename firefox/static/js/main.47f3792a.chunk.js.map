{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Search","Option","es_select","WordItem","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","word","value","react_default","a","createElement","hyphenation","phone","onClick","es_button","icon","size","bind","mean","map","React","Component","WordList","_this","words","App_WordItem","key","App","state","initLoading","loading","articles","article","visible","onDelete","item","e","url","request","Request","method","fetch","then","response","status","json","Error","result","_this2","i","length","splice","setState","catch","error","console","onSearch","getWord","handleOk","str","handleCancel","handleSelectChange","getArticles","getWords","_this3","encodeURIComponent","debug","_this4","_this5","message","warning","_this$state","mode","style","width","placeholder","onChange","enterButton","App_WordList","modal","title","top","onOk","onCancel","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.47f3792a.chunk.js","sourcesContent":["import React from 'react';\nimport { Modal, Button, Input, Select, message } from 'antd';\nconst Search = Input.Search;\nconst Option = Select.Option;\n\nclass WordItem extends React.Component {  \n  constructor(props) {\n    super(props);\n  }\n  render() {\n    const word = this.props.value;\n    return <li>{word.word + \" / \" + ((word.hyphenation == null || word.hyphenation === \"\") \n                ? \"\" : word.hyphenation) + \"  \" \n                + ((word.phone == null || word.phone === \"\") ? \"\": (\"[\" + word.phone + \"]\"))+ \"   \"}\n                {\n                  this.props.onClick == null ? \"\":\n                  <Button icon=\"close\" size=\"small\" onClick={this.props.onClick.bind(this, word)}/>\n                  }\n        <ul>\n          {(word.mean.map((mean) =>\n            <li>{mean.value}</li>\n          ))}\n        </ul>\n      </li>;\n  }\n}\n\nclass WordList extends React.Component {  \n  constructor(props) {\n    super(props);\n  }\n  render() {\n    const words = this.props.words;\n    return (\n      <ul>\n        {words.map((word) =>\n          <WordItem key={word.word} value={word} onClick={this.props.onClick} />\n        )}\n      </ul>\n    );\n  }\n}\n\nclass App extends React.Component {\n  state = {\n    initLoading: true,\n    loading: false,\n    words: null,\n    articles:[],\n    article: \"001\",\n    visible:false,\n    word:null\n  }\n\n  componentDidMount() {\n    this.getArticles();\n  }\n\n  getWords(article) {\n    var str = 'http://localhost:44430/getwordsbyarticle/';\n    str += encodeURIComponent(article);\n\n    const request = new Request(str, {method: 'get'});\n    fetch(request)\n      .then(response => {\n        if (response.status === 200) {\n          return response.json();\n        } else {\n          throw new Error('Something went wrong on api server!');\n        }\n      })\n      .then(response => {\n        console.debug(response);\n        this.setState({\n          initLoading: false,\n          words: response.words,\n        });\n      }).catch(error => {\n        console.error(error);\n      });\n  }\n\n  getArticles() {\n    var str = 'http://localhost:44430/getarticles';\n    const request = new Request(str, {method: 'get'});\n    fetch(request)\n      .then(response => {\n        if (response.status === 200) {\n          return response.json();\n        } else {\n          throw new Error('Something went wrong on api server!');\n        }\n      })\n      .then(response => {\n        console.debug(response);\n        if (response.articles != null) {\n          if (response.articles.length > 0 && this.state.words == null) {\n            this.getWords(response.articles[0]);\n          }\n          this.setState({\n            articles: response.articles,\n          });\n        }\n      }).catch(error => {\n        console.error(error);\n      });\n  } \n\n  getWord(word) {\n    var str = 'http://localhost:44430/getword/';\n    str += word;\n    str += \"/\";\n    str += encodeURIComponent(this.state.article);\n    str += \"/0\";\n\n    const request = new Request(str, {method: 'get'});\n    fetch(request)\n    .then(response => {\n      if (response.status === 200) {\n        return response.json();\n      } else {\n        throw new Error('Something went wrong on api server!');\n      }\n    })\n    .then(response => {\n      if (response.mean != null) {\n        this.setState({\n          visible: true,\n          word: response,\n        });\n      } else {\n        message.warning('wold no find!');\n      }\n    }).catch(error => {\n      console.error(error);\n    });\n  }\n\n  onDelete = (item, e) => {\n    var url = 'http://localhost:44430/changenewflag/';\n    url += item.word;\n    url += '/0';\n    const request = new Request(url, {method: 'get'});\n    fetch(request)\n      .then(response => {\n        if (response.status === 200) {\n          return response.json();\n        } else {\n          throw new Error('Something went wrong on api server!');\n        }\n      })\n      .then(response => {\n        if (response.result === 0) {\n          var words = this.state.words;\n          for (var i=0; i<words.length; i++) {\n            if (words[i].word === item.word) {\n              words.splice(i,1);\n              break;\n            }\n          }\n          this.setState(({\n              words: words,\n            })\n          );\n        }\n      }).catch(error => {\n        console.error(error);\n      });\n  }\n\n  // onPressEnter = (e) => {\n  //   this.setState({\n  //     article:e.target.value,\n  //   });\n  //   this.getWords(e.target.value);    \n  // }\n\n  onSearch = (word) => {\n    this.getWord(word);\n  }\n\n  handleOk = (e) => {\n    var words = this.state.words;\n    for (var i=0; i<words.length; i++) {\n      if (words[i].word === this.state.word.word) {\n        words.splice(i,1);\n        break;\n      }\n    }\n    words.splice(0, 0, this.state.word);\n\n    this.setState({\n      words: words,\n      visible: false,\n    });\n\n    var str = 'http://localhost:44430/getword/';\n    str += this.state.word.word;\n    str += \"/\";\n    str += this.state.article;\n    str += \"/1\";\n    const request = new Request(str, {method: 'get'});\n    fetch(request);\n  }\n\n  handleCancel = (e) => {\n    this.setState({\n      visible: false,\n    });\n  }\n\n  handleSelectChange = (value) => {\n    if (value.length > 0) {\n      var articles = this.state.articles;\n\n      this.setState({\n        article:value,\n        articles:articles,\n      });\n      this.getArticles();\n      this.getWords(value);\n    }  \n  }\n  \n  render() {\n    const { words, articles } = this.state;\n\n    return (\n      <div>\n        <Select\n          mode=\"tags\"\n          style={{ width: '100%' }}\n          placeholder=\"001\"\n          onChange={this.handleSelectChange}\n        >\n          {(articles.map((article) =>\n            <Option key={article}>{article}</Option>\n          ))}\n        </Select>\n        \n        <Search\n          placeholder=\"input english word\"\n          enterButton=\"Search\"\n          size=\"snall\"\n          onSearch={this.onSearch}\n        />\n        {\n          words == null ? \"\":\n          (<WordList words={words} onClick={this.onDelete} >\n          </WordList>)\n        }\n\n        <Modal\n          title={this.state.word == null ? \"null\": this.state.word.word}\n          style={{ top: 20}}\n          width=\"100%\"\n          visible={this.state.visible}\n          onOk={this.handleOk}\n          onCancel={this.handleCancel}\n        >\n          {\n            this.state.word == null ? \"\":\n            <WordItem key={this.state.word.word} value={this.state.word} />\n          }\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n// function getSelectText()\n// {\n//    var txt = null;\n//    if (window.getSelection){ // mozilla FF \n//     txt = window.getSelection();\n//    }else if (document.getSelection){\n//     txt = document.getSelection();\n//    }else if (document.selection){ //IE\n//     txt = document.selection.createRange().text;\n//    }\n//    return txt;\n// }\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './App.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}